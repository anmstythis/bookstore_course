import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import Header from '../components/Header.js';
import Form from '../components/Form.js';
import { getCurrentUser } from '../utils/userUtils.js';
import api from '../axiosSetup.js';

const ResetPassword = () => {
  const navigate = useNavigate();

  const [login, setLogin] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    if (password !== confirmPassword) {
      setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.');
      return;
    }

    setLoading(true);
    try {
        if (getCurrentUser())
        {
            await api.patch(`/accounts/${getCurrentUser().id_account}`, {password, });
        }
        else
        {
            await api.patch(`/auth/reset`, {login, password});
        }

        setSuccess('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!');
        setPassword('');
        setConfirmPassword('');

        localStorage.removeItem('user');
        navigate('/login');
        window.location.reload();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <Header title={'–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è'} description={getCurrentUser() ? '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–≤–∞–∂–¥—ã' : '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–≤–∞–∂–¥—ã'} />
      <div className="formContainer">
        <Form
          onSubmit={handleSubmit}
          loading={loading}
          error={error}
          success={success}
          submitLabel={'–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
          loadingLabel={'–û–±–Ω–æ–≤–ª—è–µ–º...'}
        >
            {!getCurrentUser() && (
            <>
              <label className="formLabel">–õ–æ–≥–∏–Ω</label>
              <input
                className="formInput"
                type="text"
                value={login}
                onChange={(e) => setLogin(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
                required
              />
            </>
          )}
          <label className="formLabel">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
          <div className="passwordWrapper">
            <input
              className="formInput"
              type={showPassword ? 'text' : 'password'}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
              required
            />
            <button
              type="button"
              onClick={() => setShowPassword((prev) => !prev)}
              className="togglePasswordBtn"
            >
              {showPassword ? 'üôà' : 'üëÅÔ∏è'}
            </button>
          </div>

          <label className="formLabel">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</label>
          <div className="passwordWrapper">
            <input
              className="formInput"
              type={showPassword ? 'text' : 'password'}
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
              required
            />
            <button
              type="button"
              onClick={() => setShowPassword((prev) => !prev)}
              className="togglePasswordBtn"
            >
              {showPassword ? 'üôà' : 'üëÅÔ∏è'}
            </button>
          </div>
        </Form>

       <div className="hint">
        {getCurrentUser() ? (
            <>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ <Link className="redirectLink" to="/account">–ø—Ä–æ—Ñ–∏–ª—é</Link>
            </>
        ) : (
            <>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ <Link className="redirectLink" to="/login">–≤—Ö–æ–¥—É</Link>
            </>
        )}
        </div>
      </div>
    </div>
  );
};

export default ResetPassword;
