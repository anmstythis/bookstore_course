import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import axios from 'axios';
import Header from '../components/Header.js';
import Form from '../components/Form.js';

const Register = () => {
  const navigate = useNavigate();

  // –ø–æ–ª—è —Ñ–æ—Ä–º—ã
  const [lastname, setLastname] = useState('');
  const [firstname, setFirstname] = useState('');
  const [patronymic, setPatronymic] = useState('');
  const [email, setEmail] = useState('');
  const [login, setLogin] = useState('');
  const [password, setPassword] = useState('');
  const [role_id, setRoleId] = useState('2'); 
  const [roles, setRoles] = useState([]);  

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  const [showPassword, setShowPassword] = useState(false);

  // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const fetchRoles = async () => {
      try {
        const res = await axios.get('http://localhost:5000/api/roles'); 
        setRoles(res.data);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–ª–µ–π:', err);
      }
    };
    fetchRoles();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      if (!role_id) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.');
        setLoading(false);
        return;
      }

      // —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫–∫–∞—É–Ω—Ç
      await axios.post('http://localhost:5000/api/auth/register', {
        login,
        password,
        role_id,
        lastname,
        firstname,
        patronymic,
        email
      });

      // –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      const { data } = await axios.post('http://localhost:5000/api/auth/login', {
        login,
        password
      });

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('user', JSON.stringify(data));

      navigate('/');
    } catch (err) {
      console.error(err);
      setError(err?.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <Header title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" description="–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç" />

      <div className="formContainer">
        <Form
          onSubmit={handleSubmit}
          loading={loading}
          error={error}
          submitLabel="–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
          loadingLabel="–°–æ–∑–¥–∞—ë–º –∞–∫–∫–∞—É–Ω—Ç..."
        >
          <label className="formLabel">–§–∞–º–∏–ª–∏—è</label>
          <input
            className="formInput"
            type="text"
            value={lastname}
            onChange={(e) => setLastname(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
            required
          />

          <label className="formLabel">–ò–º—è</label>
          <input
            className="formInput"
            type="text"
            value={firstname}
            onChange={(e) => setFirstname(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
            required
          />

          <label className="formLabel">–û—Ç—á–µ—Å—Ç–≤–æ</label>
          <input
            className="formInput"
            type="text"
            value={patronymic}
            onChange={(e) => setPatronymic(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ"
          />

          <label className="formLabel">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</label>
          <input
            className="formInput"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É"
            required
          />

          <label className="formLabel">–†–æ–ª—å</label>
          <select
            className="formInput"
            value={role_id}
            onChange={(e) => setRoleId(e.target.value)}
            required
          >
            {roles.map((role) => (
              <option key={role.id_role} value={role.id_role}>
                {role.rolename}
              </option>
            ))}
          </select>

          <label className="formLabel">–õ–æ–≥–∏–Ω</label>
          <input
            className="formInput"
            type="text"
            value={login}
            onChange={(e) => setLogin(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
            required
          />

          <label className="formLabel">–ü–∞—Ä–æ–ª—å</label>
          <div className="passwordWrapper">
            <input
              className="formInput"
              type={showPassword ? 'text' : 'password'}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            />
            <button
              type="button"
              onClick={() => setShowPassword((prev) => !prev)}
              className="togglePasswordBtn"
            >
              {showPassword ? 'üôà' : 'üëÅÔ∏è'}
            </button>
          </div>
        </Form>

        <div className="hint">
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
          <Link className="redirectLink" to="/login">
            –í–æ–π—Ç–∏
          </Link>
        </div>
      </div>
    </div>
  );
};

export default Register;
